<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="gameCanvas.CircuitElementResistorSprite" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        DoZDy65QGeH9MptnpNiRr+C7lwyEqpdVTtg0InmvcA3uba0Gj4AGj0kNLkwNLkwNLsxEBuc2qqZ1JXik
        Pxfe9dIAdrMqBn+jloJH5B+ouQhPv3zuMqh+hd+wZGkmsGaoE8H/hpqL8PT16X1gX8VgdtOS3fPqINj2
        Qn8ngq9EzUV4+rubTgZYMYTdtGT344tg6cTzoganH0S0I4vgE1FzIZ7+5LiWAG9eBbuZTUsWVg2FMSOO
        Z2fmYzw/2xWRIai5EF+3L74c9r42iN24VOl0tdcJrdl5+TgVtcMyNhH5pzfvvbZ76l80t3Gprp3WG4oa
        1mPn5eM1qB1ZBCe2ouZiPO1yVDP4Qo/Wv3cAwMqhMOjcI9lZ+bgbpeex25Fl8Eg/v0mOHtwFT0OGQZXw
        K2+wbjgsevBsdkYBvoGWonZkGfxC1FxQoC/8dy+AjcPZQUjwEL6yP573M2jaOPJbOfkH1J4sg7dCIz++
        iu7uWDnlAoC1w1LnodxQkmjqIsvyIbB5YT84vn0JO5sQdkXtyTI4MQ41FxVoq5KGMG/cGamDuIOrh0I1
        M6AkuZ9uZcK38feeuBi6Hl3KziSES9HsyDI20RC1eowVXWwYV9Ydtr14eeoLBLq/K2nfqu2vGASwYThU
        495m39UTWje3ukM1Y0c0O2IIToxEzcWFtiu+vU0Z1SN1vZ0+2wFf8XRVjt7+zBv+6rpA0trxnQvWXwnV
        FYNhwX1nwoWntrG5fFrTp9B4HlQXE/TwFXORkezYthiu+enRMP2WU2D55PPho6cvhS8cur15C/rJ3Eth
        /R/7wJyxp8NNAzrCKZ1bsHuN6JdoNzR7YgxO54a7UHOxVjaoX5g6ii1pwt+8XyfFtRY3rg+NGhaye8rC
        O9B4iDE48V+ouVg1OxejdRp6KCq3cDW6f0YL0TrPayi3ATW8f0ezPyrPE/RMUnqyPbcRNVg6SPsx6hRF
        6DyU25Dq7bvosaizPIDS4xO5zan/6lyU3h2dpw8a+Zq7IOmWpVFooqCv9O5BI93tmnD3oY+iHdDE0g59
        CP0C5YYgwZ3oM2hPVAz01So9JfdZlB6tyA0mSdJxDJ25/ArthIqmPUqf82PQx1C6K/Mv6GaUnoBIrwgb
        t6Pc8P3k/jtRpNu+PkLXo/SFx4PoAJQi0zeLCkM9tDFajJag9PlvIxH1q1t6+j733wojrZXW3ARtgCq1
        QKQ/ekSduJSpeKPBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHB
        haHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHB
        haHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBhaHBBVGARg1Oz0xT
        HIXiRQ1OD8hTHIWeFBj1yYT0TFTFUY5A96NcWC9boAnlsMP+H91fPsWT4BryAAAAAElFTkSuQmCC
</value>
  </data>
</root>